# Copied from ripgrep + pcap

# The way this works is a little weird. But basically, the create-release job
# runs purely to initialize the GitHub release itself. Once done, the upload
# URL of the release is saved as an artifact.
#
# The build-release job runs only once create-release is finished. It gets
# the release upload URL by downloading the corresponding artifact (which was
# uploaded by create-release). It then builds the release executables for each
# supported platform and attaches them as release assets to the previously
# created release.
#
# The key here is that we create the release only once.

name: release
on:
  push:
    # Enable when testing release infrastructure on a branch.
   branches:
     - ci3
  #pull_request:
  #  branches:
   #   - master
   tags:
    - '[0-9]+.[0-9]+.[0-9]+'
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    # env:
      # Set to force version number, e.g., when no tag exists.
      # RG_VERSION: TEST-0.0.0
    steps:
      - name: Create artifacts directory
        run: mkdir artifacts

      - name: Get the release version from the tag
        if: env.IPMAP_VERSION == ''
        run: |
          # Apparently, this is the right way to get a tag name. Really?
          #
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "IPMAP_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.IPMAP_VERSION }}"

      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.IPMAP_VERSION }}
          release_name: ${{ env.IPMAP_VERSION }}

      - name: Save release upload URL to artifact
        run: echo "${{ steps.release.outputs.upload_url }}" > artifacts/release-upload-url

      - name: Save version number to artifact
        run: echo "${{ env.IPMAP_VERSION }}" > artifacts/release-version

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: artifacts

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      TARGET_DIR: ./target
    strategy:
      matrix:
        build: [linux, macos, win-msvc, win-gnu]
        include:
        - build: linux
          os: ubuntu-latest
          rust: nightly
          target: x86_64-unknown-linux-musl
        - build: macos
          os: macos-latest
          rust: nightly
          target: x86_64-apple-darwin
        - build: win-msvc
          os: windows-latest
          rust: nightly
          target: x86_64-pc-windows-msvc
        - build: win-gnu
          os: windows-latest
          rust: nightly-x86_64-gnu
          target: x86_64-pc-windows-gnu

    steps:
     - name: Check out repo
       uses: actions/checkout@v2
     - name: Install libpcap (ubuntu)
       if: matrix.os == 'ubuntu-latest'
       run: sudo apt-get install libpcap-dev
     - name: Install libpcap (macos)
       if: matrix.os == 'macos-latest'
       run: brew install libpcap
     - name: Install WinPcap and WinPcap 4.1.2 Developer's Pack (windows)
       if: matrix.os == 'windows-latest'
       run: |
          cinst -y winpcap --version 4.1.3.20161116
          (New-Object System.Net.WebClient).DownloadFile("https://www.winpcap.org/install/bin/WpdPack_4_1_2.zip", "C:/WpdPack.zip")
          Expand-Archive -LiteralPath C:/WpdPack.zip -DestinationPath C:/
          echo "LIB=C:/WpdPack/Lib/x64" >> $env:GITHUB_ENV
       
     - name: Checkout repository
       uses: actions/checkout@v2
       with:
         fetc-depth: 1

     - name: Install Rust
       uses: actions-rs/toolchain@v1
       with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
        target: ${{ matrix.target }}

     - name: Get relase download URL
       uses: actions/download-artifact@v1
       with:
        name: artifacts
        path: artifacts

     - name: Set release upload URL and release version
       shell: bash
       run: |
        release_upload_url="$(cat artifacts/release-upload-url)"
        echo "RELEASE_UPLOAD_URL=$release_upload_url" >> $GITHUB_ENV
        echo "release upload url: $RELEASE_UPLOAD_URL"
        release_version="$(cat artifacts/release-version)"
        echo "RELEASE_VERSION=$release_version" >> $GITHUB_ENV
        echo "release version: $RELEASE_VERSION"
      
     - name: Build release binary
       run: |
        cargo build --release

     - name: Build archive
       shell: bash
       run: |
        staging="ipmap-${{ env.RELEASE_VERSION }}-${{ matrix.target }}"
        mkdir -p "$staging"/doc

        cp {README.md,LICENSE} "$staging/"

        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp "target/release/ipmap.exe" "$staging/"
          7z a "$staging.zip" "$staging"
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
        else
          cp "target/release/ipmap" "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
        fi

     - name: Upload release archive
       uses: actions/upload-release-asset@v1.0.1
       env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       with:
        upload_url: ${{ env.RELEASE_UPLOAD_URL }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream
